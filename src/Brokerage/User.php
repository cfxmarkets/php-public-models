<?php
namespace CFX\Brokerage;

class User extends \CFX\JsonApi\AbstractResource implements UserInterface {
    use \CFX\JsonApi\Rel2MTrait;
    use \CFX\ResourceValidationsTrait;

    protected $resourceType = 'users';
    protected $attributes = [
        'email' => null,
        'phoneNumber' => null,
        'displayName' => null,
        'timezone' => 'UM12',
        'language' => 'English',
        'referralKey' => null,
    ];
    protected $relationships = [
        'oAuthTokens' => null,
        'personEntity' => null,
    ];



    // Getters

    public function getEmail() { return $this->_getAttributeValue('email'); }
    public function getPhoneNumber() { return $this->_getAttributeValue('phoneNumber'); }
    public function getDisplayName() { return $this->_getAttributeValue('displayName'); }
    public function getTimezone() { return $this->_getAttributeValue('timezone'); }
    public function getLanguage() { return $this->_getAttributeValue('language'); }

    public function getReferralKey()
    {
        return $this->_getAttributeValue('referralKey');
    }

    public function getOauthTokens() { return $this->get2MRel('oAuthTokens'); }
    public function getPersonEntity()
    {
        return $this->_getRelationshipValue('personEntity');
    }




    // Setters

    public function setEmail($val) {
        $this->_setAttribute('email', $val);

        // Validate

        if (!$this->getEmail()) {
            $this->setError('email', 'required', $this->getFactory()->newError([
                "status" => 400,
                "title" => "Required Attribute `email` Missing",
                "detail" => "No email found. New users require a valid email to be passed via the `email` field."
            ]));
        } else {
            $this->clearError('email','required');

            if (!preg_match("/^([a-z0-9\+_\-]+)(\.[a-z0-9\+_\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/ix", $this->getEmail())) {
                $this->setError('email', "valid", $this->getFactory()->newError([
                    "status" => 400,
                    "title" => "Invalid Attribute Value for `email`",
                    "detail" => "The email address you've entered doesn't appear to be valid."
                ]));
            } else {
                $this->clearError('email', "valid");
            }
        }

        return $this;
    }

    public function setPhoneNumber($val) {
        $val = $this->cleanStringValue($val);

        if ($this->validateRequired('phoneNumber', $val)) {
            if ($this->validateType('phoneNumber', $val, 'string')) {
                if (!preg_match("/^\(?[0-9]{3}\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}$/", $val)) {
                    $this->setError('phoneNumber', "valid", [
                        "title" => "Invalid Attribute Value for `phoneNumber`",
                        "detail" => "The phone number you've passed is invalid"
                    ]);
                } else {
                    $this->clearError('phoneNumber', "valid");
                }
            }
        }

        return $this->_setAttribute('phoneNumber', $val);
    }

    public function setDisplayName($val) {
        $val = $this->cleanStringValue($val);

        if ($this->validateRequired('displayName', $val)) {
            $this->validateType('displayName', $val, 'non-numeric string');
        }

        return $this->_setAttribute('displayName', $val);
    }
    public function setTimezone($val) {
        $this->_setAttribute('timezone', $val);
        return $this;
    }
    public function setLanguage($val) {
        $this->_setAttribute('language', $val);
        return $this;
    }

    public function setReferralKey($val)
    {
        $val = $this->cleanStringValue($val);
        if ($val !== null) {
            if ($this->validateType('referralKey', $val, 'string')) {
                if (!preg_match('/^[a-z0-9]{32}$/', $val)) {
                    $this->setError('referralKey', 'format', [
                        'title' => "Bad Referral Key Format",
                        "detail" => "Referral keys are generated by the CFX system and should be the standard format output by the system.",
                    ]);
                } else {
                    $this->clearError("referralKey", "format");
                }
            }
        } else {
            $this->clearError('referralKey');
        }
        return $this->_setAttribute('referralKey', $val);
    }

    public function setOAuthTokens(\CFX\JsonApi\ResourceCollectionInterface $tokens=null) {
        if ($this->validateReadOnly('oAuthTokens', $tokens)) {
            $this->_setRelationship('oAuthTokens', $tokens);
        }
        return $this;
    }

    public function setPersonEntity(LegalEntityInterface $entity = null)
    {
        if ($this->validateReadOnly('personEntity', $entity)) {
            $this->_setRelationship('personEntity', $entity);
        }
        return $this;
    }
}


